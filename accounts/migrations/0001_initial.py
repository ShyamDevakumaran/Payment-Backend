# Generated by Django 4.1.7 on 2023-03-16 04:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_customer', models.BooleanField(default=False)),
                ('is_adminuser', models.BooleanField(default=False)),
                ('account_expiry', models.DateField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=45, null=True)),
                ('last_name', models.CharField(blank=True, max_length=45, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('adminid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('user', models.OneToOneField(limit_choices_to={'is_adminuser': True}, on_delete=django.db.models.deletion.PROTECT, related_name='admin', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'admin',
            },
        ),
        migrations.CreateModel(
            name='AdminMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=45)),
                ('link', models.CharField(error_messages={'unique': 'Menu with this link already exists'}, max_length=75, unique=True)),
                ('icon', models.CharField(blank=True, max_length=85, null=True)),
                ('order', models.IntegerField(default=0)),
                ('active', models.BooleanField(default=True)),
                ('title', models.CharField(max_length=125, null=True)),
                ('parent', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.adminmenu')),
            ],
            options={
                'db_table': 'admin_menu',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id_country', models.AutoField(primary_key=True, serialize=False)),
                ('country_name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'country',
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id_settings', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'settings',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id_state', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='states', to='accounts.country')),
            ],
            options={
                'db_table': 'state',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id_district', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='districts', to='accounts.state')),
            ],
            options={
                'db_table': 'district',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('cus_id', models.AutoField(primary_key=True, serialize=False)),
                ('cus_name', models.CharField(max_length=45)),
                ('cus_company_name', models.CharField(blank=True, max_length=45, null=True)),
                ('cus_location', models.CharField(blank=True, max_length=50, null=True)),
                ('cus_mobile', models.CharField(blank=True, max_length=45, null=True)),
                ('otp', models.BooleanField(default=False)),
                ('user', models.OneToOneField(limit_choices_to={'is_customer': True}, on_delete=django.db.models.deletion.PROTECT, related_name='customer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'customer',
            },
        ),
        migrations.CreateModel(
            name='AdminMenuAccess',
            fields=[
                ('id_admin_menu_access', models.AutoField(primary_key=True, serialize=False)),
                ('view', models.BooleanField(default=False)),
                ('add', models.BooleanField(default=False)),
                ('edit', models.BooleanField(default=False)),
                ('delete', models.BooleanField(default=False)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_access', to='accounts.admin')),
                ('menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_admin', to='accounts.adminmenu')),
            ],
            options={
                'db_table': 'admin_menu_access',
            },
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('is_customer', models.F('is_adminuser')), _negated=True), name='Admin and Customer values cannot be same', violation_error_message='isAdmin and isCustomer values cannot be same'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('is_customer', True)), models.Q(('is_staff', True)), _negated=True), name='Customer cannot become a staff', violation_error_message='Customer cannot become a staff'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('is_customer', True)), models.Q(('is_superuser', True)), _negated=True), name='Customer cannot become superuser', violation_error_message='Customer cannot become superuser'),
        ),
    ]
